from scipy.io import loadmat
import numpy as np

# Reads .mat files generated by replab using the 'save -v7' command.

def readMatFile():
    # output: dictionary of form {'basis':basis, 'gen_names':gen_names, 'gen_images':gen_images}
    # where gen_images is a list of np.arrays, each of which is a generator image.
    #
    # the order of the list gen_names matches the order of the list gen_images.

    basis_file = input('Basis file (.mat format): ')
    generator_files = input('Generator files (.mat format, one generator per file, file names separated by a space): ').split()

    # Generates np.array such that each subarray is a basis element (the .T is
    # needed because replab outputs the basis using columns for basis elements,
    # and rows are interpreted as the subarrays). 
    #
    # The loadmat function produces a dictionary with some info about the basis,
    # the entry of the dictionary relevant to us is the actual basis elements, 'basis'.
    #
    basis = np.array(loadmat(basis_file)['basis']).T
    
    # Generates a list where each element is the result of loadmap(generator_files[i])
    # for different values of i. Each entry is a dictionary.
    #
    generators_long = list(map(loadmap,generator_files))
    
    # Only the last entry of the dictionary is important to us. First we collect the
    # generator names. x is a dictionary, list(x) is a list of the dictionary words,
    # the last element of the list is the generator name we're looking for.
    #
    # generator_names = list(map(lambda x: list(x)[-1]))
    
    # list(x)[-1] is the generator name corresponding to the dictionary x (each dict
    # corresponds to one generator). x[list(x)[-1]] is the corresponding image of 
    # list(x)[-1] --this is according to the format in which Replab save -v7 works.
    #
    # Create list where each list element is of the form [ gen_name, gen_image],
    # where gen_image is an np.array.
    #
    generator_n_i = list(map(lambda x: [list(x)[-1], np.array(x[list(x)[-1]])], generators_long))

    # now create a list of names and list of images separately
    gen_names = [y[0] for y in generator_n_i]
    gen_images = [y[1]] for y in generator_n_i]
    
    full = {'basis':basis, 'gen_names':gen_names, 'gen_images':gen_images}

    return full

