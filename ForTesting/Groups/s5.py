import numpy as np
import cmath, math

def E(p):
    return cmath.exp(2*cmath.pi*1.j * p**(-1))

def parameters():
    return [0,11,0] #cayely graph computed with the grape extension of GAP.

def triv_rep(g):
    return np.array([[1]])

def sign_rep(g):
    if g.name == '12':
        return np.array([[-1]])
    if g.name == '12345':
        return np.array([[1]])
        
#
# The following reps are obtained using GAP's
# IrreducibleRepresentationsDixon(SymmetricGroup(5):unitary); command.
# They're pretty ugly so I'll just include a couple
#

def d4_rep(g):
    if g.name == '12':
        return np.array(
        [   [ -1/2, 1/6*E(12)**7-1/6*E(12)**11, -1/3*E(24)+1/3*E(24)**11+1/3*E(24)**17-1/3*E(24)**19, 0 ], 
            [ 1/6*E(12)**7-1/6*E(12)**11, -5/6, 1/3*E(8)-1/3*E(8)**3, 0 ], 
            [ -1/3*E(24)+1/3*E(24)**11+1/3*E(24)**17-1/3*E(24)**19, 1/3*E(8)-1/3*E(8)**3, 1/3, 0 ], 
            [ 0, 0, 0, -1 ] ]
        )
    if g.name == '12345':
        return np.array(
        [   [ -1/2, 1/6*E(12)**7-1/6*E(12)**11, -1/12*E(24)+1/12*E(24)**11+1/12*E(24)**17-1/12*E(24)**19, 
            1/4*E(40)**7-1/4*E(40)**13+1/4*E(40)**21+1/4*E(40)**23+1/4*E(40)**29-1/4*E(40)**31-1/4*E(40)**37-1/4*E(40)**39 ], 
            [ -1/6*E(12)**7+1/6*E(12)**11, 1/6, 7/12*E(8)-7/12*E(8)**3, -1/12*E(120)**7-1/12*E(120)**13+1/12*E(120)**23-1/12*E(120)**29+1/12*E(120)**31-1/12*E(120)**37
            +1/12*E(120)**47+1/12*E(120)**53+1/12*E(120)**61-1/12*E(120)**71+1/12*E(120)**77+1/12*E(120)**79-1/12*E(120)**101-1/12*E(120)**103+1/12*E(120)**109
            -1/12*E(120)**119 ], 
            [ 1/3*E(24)-1/3*E(24)**11-1/3*E(24)**17+1/3*E(24)**19, -1/6*E(8)+1/6*E(8)**3, -5/12, 
            -1/12*E(60)**7-1/12*E(60)**11+1/12*E(60)**19+1/12*E(60)**23+1/12*E(60)**31-1/12*E(60)**43+1/12*E(60)**47-1/12*E(60)**59 ], 
            [ 0, 1/6*E(120)**7+1/6*E(120)**13-1/6*E(120)**23+1/6*E(120)**29-1/6*E(120)**31+1/6*E(120)**37-1/6*E(120)**47-1/6*E(120)**53-1/6*E(120)**61+1/6*E(120)**71
            -1/6*E(120)**77-1/6*E(120)**79+1/6*E(120)**101+1/6*E(120)**103-1/6*E(120)**109+1/6*E(120)**119, -1/12*E(60)**7-1/12*E(60)**11+1/12*E(60)**19+1/12*E(60)**23
            +1/12*E(60)**31-1/12*E(60)**43+1/12*E(60)**47-1/12*E(60)**59, -1/4 ] ]
        )
        
def d5_rep(g):
    if g.name == '12':
        return np.array(
        [   [ 1/3, -1/6*E(8)+1/6*E(8)**3, -1/6*E(24)+1/6*E(24)**11+1/6*E(24)**17-1/6*E(24)**19, 
            -1/6*E(24)+1/6*E(24)**11+1/6*E(24)**17-1/6*E(24)**19, -1/2*E(8)+1/2*E(8)**3 ], 
            [ -1/6*E(8)+1/6*E(8)**3, 1/6, 1/3*E(12)**7-1/3*E(12)**11, 1/3*E(12)**7-1/3*E(12)**11, 1/2 ], 
            [ -1/6*E(24)+1/6*E(24)**11+1/6*E(24)**17-1/6*E(24)**19, 1/3*E(12)**7-1/3*E(12)**11, -1/2, 1/2, 0 ], 
            [ -1/6*E(24)+1/6*E(24)**11+1/6*E(24)**17-1/6*E(24)**19, 1/3*E(12)**7-1/3*E(12)**11, 1/2, -1/2, 0 ], 
            [ -1/2*E(8)+1/2*E(8)**3, 1/2, 0, 0, -1/2 ] ]
        )
    if g.name == '12345':
        return np.array(
        [   [ 1/3, 1/3*E(8)-1/3*E(8)**3, 0, -1/3*E(24)+1/3*E(24)**11+1/3*E(24)**17-1/3*E(24)**19, 0 ], 
            [ -2/3*E(8)+2/3*E(8)**3, 1/6, 0, 1/6*E(12)**7-1/6*E(12)**11, 0 ], 
            [ 0, -1/2*E(12)**7+1/2*E(12)**11, 0, 1/2, 0 ], [ 0, 0, 1/2, 0, 1/2*E(12)**7-1/2*E(12)**11 ], 
            [ 0, 0, 1/2*E(12)**7-1/2*E(12)**11, 0, -1/2 ] ]
        )

def d6_rep(g):
    if g.name == '12':
        return np.array(
        [   [ -1, 0, 0, 0, 0, 0 ], 
            [ 0, 1/2, 1/2*E(12)**7-1/2*E(12)**11, 0, 0, 0 ], 
            [ 0, 1/2*E(12)**7-1/2*E(12)**11, -1/2, 0, 0, 0 ], 
            [ 0, 0, 0, -1, 0, 0 ], 
            [ 0, 0, 0, 0, 1, 0 ], 
            [ 0, 0, 0, 0, 0, 1 ] ]
        )
    if g.name == '12345':
        return np.array(
        [   [ 0, 1/4*E(8)-1/4*E(8)**3, 1/12*E(24)-1/12*E(24)**11-1/12*E(24)**17+1/12*E(24)**19, 1/12*E(120)**7+1/12*E(120)**13-1/12*E(120)**23+1/12*E(120)**29-1/12*E(120)**31
            +1/12*E(120)**37-1/12*E(120)**47-1/12*E(120)**53-1/12*E(120)**61+1/12*E(120)**71-1/12*E(120)**77-1/12*E(120)**79+1/12*E(120)**101+1/12*E(120)**103
            -1/12*E(120)**109+1/12*E(120)**119, 1/12*E(40)**7-1/12*E(40)**13+1/12*E(40)**21+1/12*E(40)**23+1/12*E(40)**29-1/12*E(40)**31-1/12*E(40)**37-1/12*E(40)**39, 
            -1/3*E(5)+1/3*E(5)**2+1/3*E(5)**3-1/3*E(5)**4 ], 
            [ 0, 1/2, 1/12*E(12)**7-1/12*E(12)**11, 1/24*E(60)**7+1/24*E(60)**11-1/24*E(60)**19-1/24*E(60)**23-1/24*E(60)**31+1/24*E(60)**43-1/24*E(60)**47+1/24*E(60)**59, 
            -7/24*E(5)+7/24*E(5)**2+7/24*E(5)**3-7/24*E(5)**4, -1/6*E(40)**7+1/6*E(40)**13-1/6*E(40)**21-1/6*E(40)**23-1/6*E(40)**29+1/6*E(40)**31+1/6*E(40)**37
            +1/6*E(40)**39 ], 
            [ -1/6*E(24)+1/6*E(24)**11+1/6*E(24)**17-1/6*E(24)**19, -5/12*E(12)**7+5/12*E(12)**11, 0, -1/8*E(5)+1/8*E(5)**2+1/8*E(5)**3-1/8*E(5)**4, 
            1/8*E(60)**7+1/8*E(60)**11-1/8*E(60)**19-1/8*E(60)**23-1/8*E(60)**31+1/8*E(60)**43-1/8*E(60)**47+1/8*E(60)**59, 0 ], 
            [ -1/12*E(120)**7-1/12*E(120)**13+1/12*E(120)**23-1/12*E(120)**29+1/12*E(120)**31-1/12*E(120)**37+1/12*E(120)**47+1/12*E(120)**53+1/12*E(120)**61-1/12*E(120)**71
            +1/12*E(120)**77+1/12*E(120)**79-1/12*E(120)**101-1/12*E(120)**103+1/12*E(120)**109-1/12*E(120)**119, 
            -1/24*E(60)**7-1/24*E(60)**11+1/24*E(60)**19+1/24*E(60)**23+1/24*E(60)**31-1/24*E(60)**43+1/24*E(60)**47-1/24*E(60)**59, 
            -3/8*E(5)+3/8*E(5)**2+3/8*E(5)**3-3/8*E(5)**4, 1/8, 1/24*E(12)**7-1/24*E(12)**11, -1/12*E(24)+1/12*E(24)**11+1/12*E(24)**17-1/12*E(24)**19 ], 
            [ 1/12*E(40)**7-1/12*E(40)**13+1/12*E(40)**21+1/12*E(40)**23+1/12*E(40)**29-1/12*E(40)**31-1/12*E(40)**37-1/12*E(40)**39, 
            -1/24*E(5)+1/24*E(5)**2+1/24*E(5)**3-1/24*E(5)**4, 1/24*E(60)**7+1/24*E(60)**11-1/24*E(60)**19-1/24*E(60)**23-1/24*E(60)**31+1/24*E(60)**43-1/24*E(60)**47
            +1/24*E(60)**59, -11/24*E(12)**7+11/24*E(12)**11, 3/8, 1/4*E(8)-1/4*E(8)**3 ], 
            [ -1/3*E(5)+1/3*E(5)**2+1/3*E(5)**3-1/3*E(5)**4, 1/12*E(40)**7-1/12*E(40)**13+1/12*E(40)**21+1/12*E(40)**23+1/12*E(40)**29-1/12*E(40)**31-1/12*E(40)**37
            -1/12*E(40)**39, 1/12*E(120)**7+1/12*E(120)**13-1/12*E(120)**23+1/12*E(120)**29-1/12*E(120)**31+1/12*E(120)**37-1/12*E(120)**47-1/12*E(120)**53
            -1/12*E(120)**61+1/12*E(120)**71-1/12*E(120)**77-1/12*E(120)**79+1/12*E(120)**101+1/12*E(120)**103-1/12*E(120)**109+1/12*E(120)**119, 
            -1/12*E(24)+1/12*E(24)**11+1/12*E(24)**17-1/12*E(24)**19, -1/4*E(8)+1/4*E(8)**3, 0 ] ]
        )

###
# if g.name == '12':
#     return np.array()
# if g.name == '12345':
#     return np.array()
###